alpha = 1, family = 'binomial')
lasso_idf <- glmnet(x = as.matrix(tfidf[tfidf$fold != i, 1:1000]),
y = tfidf[tfidf$fold !=i, 1002],
alpha = 1, family = 'binomial',
lambda = lambda_idf$lambda.1se)
auc_idf[i] <- predict(lasso_idf,
type = "response",
s = 'lambda.min',
newx = as.matrix(tfidf[tfidf$fold == i, 1:1000])) %>%
prediction(tfidf[tfidf$fold == i, 1002]) %>%
performance("auc") %>%
slot("y.values") %>%
unlist()
print(i)
}
mean(auc_freq)
mean(auc_idf)
lasso_lambda <- cv.glmnet(x = as.matrix(training[, 1:1000]),
y = training[, 1001],
alpha = 1, family = 'binomial')
lasso_lambda$lambda.min
lasso_mod <- glmnet(x = as.matrix(training[, 1:1000]),
y = training[, 1001],
alpha = 1, family = 'binomial',
lambda = lasso_lambda$lambda.min)
lasso_auc <- predict(lasso_mod,
type = "response",
s = 'lambda.min',
newx = as.matrix(testing[, 1:1000])) %>%
prediction(testing[, 1001]) %>%
performance("auc") %>%
slot("y.values") %>%
unlist()
lasso_auc
rf_mod <- randomForest(x = training[, 1:1000],
y = training[, 1001])
rf_auc <- predict(rf_mod, type = "prob", newdata = testing[, 1:1000])[, 2] %>%
prediction(testing[, 1001]) %>%
performance("auc") %>%
slot("y.values") %>%
unlist()
rf_auc
varImpPlot(rf_mod, n.var = 10, main = "Variable Importance")
varImpPlot(rf_mod, n.var = 10, main = "Variable Importance", xlab = "Importance")
varImpPlot(rf_mod, n.var = 10, main = "Variable Importance", ylab = "Importance")
?partialPlot
partialPlot(x = rf_mod, x.var = "swiss", pred.data = training[, 1:1001])
rf_roc <- predict(rf_mod, type = "prob", newdata = testing[, 1:1000])[, 2] %>%
prediction(testing[, 1001]) %>%
performance("tpr", "fpr")
plot(rf_roc, main = "ROC Curve for Random Forest (Bag-of-Words)", col = 2, lwd = 2)
abline(a = 0, b = 1, lwd = 2, lty = 2, col = "gray")
text(x = 0.1, y = 0.85, labels = paste("AUC =", round(rf_auc, 2)))
predict(rf_mod, type = "prob", newdata = menu_sub)
restaurant_data$new_pred <- predict(rf_mod, type = "prob", newdata = menu_sub)[, 2]
plot(density(restaurant_data$new_pred))
select(restaurant_data, names, new_pred) %>%
arrange(desc(new_pred)) %>%
head(n = 50)
select(restaurant_data, name, new_pred) %>%
arrange(desc(new_pred)) %>%
head(n = 50)
select(restaurant_data, names, new_pred) %>%
arrange(new_pred) %>%
head(n = 50)
select(restaurant_data, name, new_pred) %>%
arrange(new_pred) %>%
head(n = 50)
plot(density(restaurant_data$new_pred))
summary(restaurant_data$new_pred)
as.character(cut(restaurant_data$new_pred,
breaks = quantile(restaurant_data$new_pred, probs = c(0, 0.25, 0.75, 1.00)),
include.lowest = TRUE,
labels = c("red", "yellow", "green")))
restaurant_data$health_color = as.character(cut(restaurant_data$new_pred,
breaks = quantile(restaurant_data$new_pred, probs = c(0, 0.25, 0.75, 1.00)),
include.lowest = TRUE,
labels = c("red", "yellow", "green")))
foo[97, ]
restaurant_data[97, ]
restaurant_data[1578, ]
restaurant_data[1139, ]
restaurant_data[1705, ]
restaurant_data[2016, ]
restaurant_data[720, ]
restaurant_data[703, ]
restaurant_data[704, ]
restaurant_data[727, ]
restaurant_data[1107, ]
restaurant_data[1322, ]
restaurant_data[267, ]
restaurant_data[1478, ]
restaurant_data[1842, ]
restaurant_data[1843, ]
restaurant_data[2053, ]
restaurant_data[2022, ]
restaurant_data[1099, ]
restaurant_data[1745, ]
restaurant_data[1269, ]
restaurant_data[1845, ]
restaurant_data[212, ]
quantile(restaurant_data$new_pred, probs = c(0, 0.25, 0.75, 1.00))
restaurant_data[157, ]
restaurant_data[1107, ]
restaurant_data[1258, ]
restaurant_data[1578, ]
restaurant_data[2022, ]
restaurant_data[restaurant_data$name == "Au Bon Pain", ]
restaurant_data[restaurant_data$name == "Brueggers Bagels", ]
restaurant_data[restaurant_data$name == "Breuggers Bagels", ]
restaurant_data[restaurant_data$name == "Bruegger's Bagels", ]
restaurant_data[restaurant_data$name == "Cosi", ]
restaurant_data[restaurant_data$name == "COSI", ]
restaurant_data[restaurant_data$name == "Cosi", ]
restaurant_data[restaurant_data$name == "Cosi Sandwich Bar", ]
restaurant_data[restaurant_data$name == "Panera Bread", ]
restaurant_data[restaurant_data$name == "Panda Express", ]
restaurant_data[restaurant_data$name == "Cheesecake Factory", ]
restaurant_data[restaurant_data$name == "The Cheesecake Factory", ]
restaurant_data[restaurant_data$name == "Sebastian's Cafe", ]
restaurant_data[restaurant_data$name == "Chacarero", ]
restaurant_data[restaurant_data$name == "Sebastian's Cafe", ]
head(restaurant_data)
grep("vegan", restaurant_data$tags)
grep("vegetarian", restaurant_data$tags)
grep("gluten", restaurant_data$tags)
grep("Gluten", restaurant_data$tags)
grep("free", restaurant_data$tags)
restaurant_data$tags
grep("vegan", restaurant_data$tags)
head(restaurant_data)
restaurant_data$isVegan <- ifelse(grepl("vegan", restaurant_data$tags), 1, 0)
grepl("vegan", restaurant_data$tags)
restaurant_data[2079, ]
restaurant_data$isVegetarian <- ifelse(grepl("vegetarian", restaurant_data$tags), 1, 0)
head(restaurant_data)
select(restaurant_data, name, address, latitude, longitude, link,
price, health_color, isVegan, isVegetarian) %>%
write.csv("Data/restaurant_ratings.csv", row.names = FALSE)
library(DBI)
rm(list = ls())
library(DBI)
library(dplyr)
library(RCurl)
library(SDMTools)
library(jsonlite)
con <- dbConnect(RMySQL::MySQL(), db = "food_db")
restaurant_data <- dbGetQuery(con, "SELECT * FROM food_tb") %>%
.[, -1]
dbDisconnect(con)
head(restaurant_data)
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
con <- dbConnect(RMySQL::MySQL(), db = "food_db")
restaurant_data <- dbGetQuery(con, "SELECT * FROM food_tb") %>%
.[, -1]
dbDisconnect(con)
head(restaurant_data)
input_address <- "50 Milk Street"
input_distance <- 1
input_price <- c("$", "$$", "$$$", "$$$$")
address_call <- paste0("https://maps.googleapis.com/maps/api/geocode/json?address=",
input_address,
",+Boston,+MA")
address_data <- URLencode(address_call) %>%
getURL() %>%
fromJSON()
address_lat <- address_data$results$geometry$location$lat
address_long <- address_data$results$geometry$location$lng
address_lat
METERS_TO_MILES <- 0.000621371192
distances <- distance(lat1 = rep(address_lat, time = nrow(restaurant_data)),
lon1 = rep(address_long, time = nrow(restaurant_data)),
lat2 = restaurant_data$longitude,
lon2 = restaurant_data$latitude)
distances
distances <- distance(lat1 = rep(address_lat, time = nrow(restaurant_data)),
lon1 = rep(address_long, time = nrow(restaurant_data)),
lat2 = restaurant_data$latitude,
lon2 = restaurant_data$longitude)
distances
restaurant_data$distance <- round(distances$distance * METERS_TO_MILES, 2)
restaurant_data$distance
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
rm(list = ls())
library(dplyr)
library(randomForest)
library(glmnet)
library(ROCR)
library(DBI)
set.seed(2348) # set seed for reproducibility
library(dplyr)
library(randomForest)
library(glmnet)
library(ROCR)
library(DBI)
set.seed(2348) # set seed for reproducibility
#################
# Read in data
restaurant_data <- read.csv("Data/restaurant_info.csv") %>%
mutate(tags = gsub(".*'cuisine', |);\n", "", as.character(tags)))
# Set healthy labels based on tags:
# vegan, vegetarian, local/organic, health food, and sandwiches (but not pizza)
restaurant_data$isHealthy <- NA
restaurant_data$isHealthy[grep("vegan|vegetarian|local|salads|health-food|sandwiches", restaurant_data$tags)] <- 1
restaurant_data$isHealthy[grep("pizza", restaurant_data$tags)] <- 0
restaurant_data$isHealthy[is.na(restaurant_data$isHealthy)] <- 0
restaurant_data$isHealthy <- factor(restaurant_data$isHealthy)
menu_data <- read.csv("Data/menu_words.csv")
menu_data <- menu_data[, -1]
menu_sub <- menu_data[, names(menu_data) %in% names(sort(colSums(menu_data), decreasing = TRUE))[1:1000]]
menu_sub$isHealthy <- restaurant_data$isHealthy
train_ids <- sample(1:nrow(menu_sub), floor(nrow(menu_sub) * .70), replace = FALSE)
training <- menu_sub[train_ids,]
testing <- menu_sub[-train_ids,]
rf_mod <- randomForest(x = training[, 1:1000],
y = training[, 1001])
rf_auc <- predict(rf_mod, type = "prob", newdata = testing[, 1:1000])[, 2] %>%
prediction(testing[, 1001]) %>%
performance("auc") %>%
slot("y.values") %>%
unlist()
varImpPlot(rf_mod, n.var = 10, main = "Variable Importance", ylab = "Importance")
varImpPlot(rf_mod, n.var = 10, main = "Variable Importance")
library(ggplot2)
rf_mod$importance
names(rf_mod$importance)
head(rf_mod$importance)
arrange(rf_mod$importance, MeanDecreaseGini)
rf_importance <- as.data.frame(rf_mod$importance)
rf_importance
head(rf_importance)
rf_importance <- as.data.frame(rf_mod$importance) %>%
arrange(MeanDecreaseGini) %>%
head()
rf_importance
as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.))
as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.)) %>%
arrange(MeanDecreaseGini)
as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.)) %>%
arrange(desc(MeanDecreaseGini))
as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.)) %>%
arrange(desc(MeanDecreaseGini)) %>%
head()
as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.)) %>%
arrange(desc(MeanDecreaseGini)) %>%
head(n = 10)
as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.)) %>%
setNames(MeanDecreaseGini = Importance) %>%
arrange(desc(MeanDecreaseGini)) %>%
head(n = 10)
as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.)) %>%
arrange(desc(MeanDecreaseGini)) %>%
head(n = 10)
rf_importance <- as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.)) %>%
arrange(desc(MeanDecreaseGini)) %>%
head(n = 10)
names(rf_importance)
names(rf_importance)[1] <- "Importance"
ggplot(aes(x = Importance, y = food), data = rf_importance) + geom_point()
str(rf_importance)
rf_importance
ggplot(aes(x = food, y = Importance), data = rf_importance) + geom_point()
str(rf_importance)
rf_importance$food
rf_importance$food <- factor(rf_importance$food, levels = rf_importance$food)
ggplot(aes(x = food, y = Importance), data = rf_importance) + geom_point()
ggplot(aes(x = food, y = Importance), data = rf_importance) + geom_point() + coord_flip()
rf_importance <- as.data.frame(rf_mod$importance) %>%
mutate(food = row.names(.)) %>%
arrange(desc(MeanDecreaseGini)) %>%
head(n = 10)
names(rf_importance)[1] <- "Importance"
rf_importance$food <- factor(rf_importance$food, levels = rev(rf_importance$food))
ggplot(aes(x = food, y = Importance), data = rf_importance) + geom_point() + coord_flip()
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point() +
coord_flip() +
theme_bw()
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
coord_flip() +
theme_bw()
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
coord_flip() +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.tect = element_text(size = 16))
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
coord_flip() +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16))
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16))
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
scale_x_continuous(breaks = 4:10) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16))
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
scale_y_continuous(breaks = 4:10) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16))
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
scale_y_continuous(breaks = 4:10) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
ggtitle("Variable Importance") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16))
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
scale_y_continuous(breaks = 4:10) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
ggtitle("Variable Importance\n") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16))
dev.off()
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
scale_y_continuous(breaks = 4:10) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
ggtitle("Variable Importance\n") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16))
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
scale_y_continuous(breaks = 4:10) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
ggtitle("Variable Importance\n") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
title = element_text(face = "bold", size = 16))
pdf("Figure/rf_imp.pdf", width = 10, height = 10)
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
scale_y_continuous(breaks = 4:10) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
ggtitle("Variable Importance\n") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
title = element_text(face = "bold", size = 16))
dev.off()
rf_roc <- predict(rf_mod, type = "prob", newdata = testing[, 1:1000])[, 2] %>%
prediction(testing[, 1001]) %>%
performance("tpr", "fpr")
plot(rf_roc, main = "ROC Curve for Random Forest (Bag-of-Words)", col = 2, lwd = 2)
abline(a = 0, b = 1, lwd = 2, lty = 2, col = "gray")
text(x = 0.1, y = 0.85, labels = paste("AUC =", round(rf_auc, 2)))
pdf("Figure/auc_rf.pdf", width = 10, height = 10)
plot(rf_roc, main = "ROC Curve for Random Forest (Bag-of-Words)", col = 2, lwd = 2)
abline(a = 0, b = 1, lwd = 2, lty = 2, col = "gray")
text(x = 0.1, y = 0.85, labels = paste("AUC =", round(rf_auc, 2)))
dev.off()
pdf("Figure/rf_imp.pdf", width = 5, height = 5)
ggplot(aes(x = food, y = Importance), data = rf_importance) +
geom_point(size = 3) +
scale_y_continuous(breaks = 4:10) +
labs(x = "Food\n", y = "\nImportance") +
coord_flip() +
theme_bw() +
ggtitle("Variable Importance\n") +
theme(axis.title = element_text(size = 16),
axis.text = element_text(size = 16),
title = element_text(face = "bold", size = 16))
dev.off()
pdf("Figure/auc_rf.pdf", width = 5, height = 5)
plot(rf_roc, main = "ROC Curve for Random Forest (Bag-of-Words)", col = 2, lwd = 2)
abline(a = 0, b = 1, lwd = 2, lty = 2, col = "gray")
text(x = 0.1, y = 0.85, labels = paste("AUC =", round(rf_auc, 2)))
dev.off()
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
input_address <- "TD Garden"
input_distance <- 1
input_price <- c("$", "$$", "$$$", "$$$$")
paste0("https://maps.googleapis.com/maps/api/geocode/json?address=",
input_address,
",+Boston,+MA")
address_call <- paste0("https://maps.googleapis.com/maps/api/geocode/json?address=",
input_address,
",+Boston,+MA")
address_call
address_data <- URLencode(address_call) %>%
getURL() %>%
fromJSON()
address_data
address_data$results$geometry$location$lat
address_data$results$geometry$location$lng
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
input_address <- "50 Milk Street"
input_distance <- 1
input_price <- c("$", "$$", "$$$", "$$$$")
address_call <- paste0("https://maps.googleapis.com/maps/api/geocode/json?address=",
input_address,
",+Boston,+MA")
address_data <- URLencode(address_call) %>%
getURL() %>%
fromJSON()
address_data
address_data$results$geometry$location$lat
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
address_call <- paste0("https://maps.googleapis.com/maps/api/geocode/json?address=",
input_address,
",+Boston,+MA")
address_call
input_address <- "Lakecroft Ct Melrose"
input_distance <- 1
input_price <- c("$", "$$", "$$$", "$$$$")
address_call <- paste0("https://maps.googleapis.com/maps/api/geocode/json?address=",
input_address,
",+Boston,+MA")
address_call
address_data <- URLencode(address_call) %>%
getURL() %>%
fromJSON()
address_data
address_lat <- address_data$results$geometry$location$lat[1]
address_long <- address_data$results$geometry$location$lng[1]
address_lat
address_long
address_lat <- address_data$results$geometry$location$lat[1]
address_long <- address_data$results$geometry$location$lng[1]
METERS_TO_MILES <- 0.000621371192
distances <- distance(lat1 = rep(address_lat, time = nrow(restaurant_data)),
lon1 = rep(address_long, time = nrow(restaurant_data)),
lat2 = restaurant_data$latitude,
lon2 = restaurant_data$longitude)
restaurant_data$distance <- round(distances$distance * METERS_TO_MILES, 2)
restaurant_data$health_color <- factor(restaurant_data$health_color, levels = c("green", "yellow", "red"))
select(restaurant_data, names, addresses, price, health_color, distance, longitude, latitude, links) %>%
filter(price %in% input_price, distance < input_distance) %>%
arrange(health_color, distance)
list(c(address_long, address_lat), restaurant_sub)
restaurant_data$distance <- round(distances$distance * METERS_TO_MILES, 2)
restaurant_data$health_color <- factor(restaurant_data$health_color, levels = c("green", "yellow", "red"))
restaurant_sub <- select(restaurant_data, names, addresses, price, health_color, distance, longitude, latitude, links) %>%
filter(price %in% input_price, distance < input_distance) %>%
arrange(health_color, distance)
list(c(address_long, address_lat), restaurant_sub)
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
leaflet(output_table) %>%
setView(lng = output_location[1], lat = output_location[2], zoom = 16)
leaflet() %>%
setView(lng = output_location[1], lat = output_location[2], zoom = 16)
output_data <- create_table(input$address, input$distance, input$price)
c(address_long, address_lat)
output_location <- c(address_long, address_lat)
leaflet() %>%
setView(lng = output_location[1], lat = output_location[2], zoom = 16)
leaflet() %>%
addTiles()
leaflet() %>%
setView(lng = output_location[1], lat = output_location[2], zoom = 16) %>%
addProviderTiles("CartoDB.Positron")
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
output_location
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
rm(list = ls())
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
