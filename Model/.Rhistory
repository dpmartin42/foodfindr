iconUrl = ifelse(quakes1$mag < 4.6,
"http://leafletjs.com/docs/images/leaf-green.png",
"http://leafletjs.com/docs/images/leaf-red.png"
),
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/docs/images/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
leaflet(data = quakes1) %>% addTiles() %>%
addMarkers(~long, ~lat, icon = leafIcons)
# Make a list of icons. We'll index into it based on name.
oceanIcons <- iconList(
ship = makeIcon("ferry-18.png", "ferry-18@2x.png", 18, 18),
pirate = makeIcon("danger-24.png", "danger-24@2x.png", 24, 24)
)
# Some fake data
df <- sp::SpatialPointsDataFrame(
cbind(
(runif(20) - .5) * 10 - 90.620130,  # lng
(runif(20) - .5) * 3.8 + 25.638077  # lat
),
data.frame(type = factor(
ifelse(runif(20) > 0.75, "pirate", "ship"),
c("ship", "pirate")
))
)
leaflet(df) %>% addTiles() %>%
# Select from oceanIcons based on df$type
addMarkers(icon = ~oceanIcons[type])
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
leaflet(df) %>% addTiles() %>% addCircleMarkers()
pal <- colorFactor(c("navy", "red"), domain = c("ship", "pirate"))
leaflet(df) %>% addTiles() %>%
addCircleMarkers(
radius = ~ifelse(type == "ship", 6, 10),
color = ~pal(type),
stroke = FALSE, fillOpacity = 0.5
)
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'><Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
content
leaflet() %>%
addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE))
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>%
addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE))
leaflet() %>%
addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = TRUE))
library(htmltools)
df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodel,47.597131,-122.3272998
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"
))
df
leaflet(df) %>%
addTiles() %>%
addMarkers(~Long, ~Lat, popup = ~htmlEscape(Name))
df <- read.csv(textConnection(
"Name,Lat,Long
<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>,47.597131,-122.3272998
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"
))
df
leaflet(df) %>%
addTiles() %>%
addMarkers(~Long, ~Lat, popup = ~Name)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(RColorBrewer)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
library(leaflet)
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
library(RCurl)
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
rm(list = ls())
library(leaflet)
my_data <- read.csv("Data/restaurant_ratings.csv")
head(my_data)
m <- leaflet(my_data)
m <- leaflet(my_data)  %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,])  %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
leaflet() %>%
addTiles()
leaflet() %>%
addTiles() %>% # add default OpenStreetMap map tiles
addMarkers(lng = -71.0589,
lat = 42.3601,
popup = "Boston, MA")
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>% # add default OpenStreetMap map tiles
addMarkers(lng = -71.0589,
lat = 42.3601,
popup = "Boston, MA")
m
m <- leaflet() %>%
addProviderTiles("OpenStreetMap") %>% # add default OpenStreetMap map tiles
addMarkers(lng = -71.0589,
lat = 42.3601,
popup = "Boston, MA")
m
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("OpenStreetMap") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("OpenStreetMap.DE") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude)
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("Stamen.Toner") %>%
addMarkers(~longitude, ~latitude)
m
names(my_data)
my_data <- read.csv("Data/restaurant_ratings.csv")
names(my_data)[4:5] <- c("latitude", "longitude")
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("Stamen.Toner") %>%
addMarkers(~longitude, ~latitude)
m
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("OpenStreeMap.DE") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("OpenStreetMap.DE") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,])  %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,]) %>%
setView(71.057608, 42.356745, zoom = 4) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,]) %>%
setView(-71.057608, 42.356745, zoom = 4) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,]) %>%
setView(-71.057608, 42.356745, zoom = 14) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,]) %>%
setView(-71.057608, 42.356745, zoom = 15) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names))
m
m <- leaflet(my_data[0:100,]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(names),
clusterOptions = markerClusterOptions())
m
foo <- head(my_data)
foo
str(foo)
paste0("<b><a href='http://boston.menupages.com", foo[1])
paste0("<b><a href='http://boston.menupages.com", foo$links[1])
paste0("<b><a href='http://boston.menupages.com", foo$links)
paste0("<b><a href='http://boston.menupages.com", foo$links, ">", foo$names, "</a></b>")
foo$addresses
paste0("<b><a href='http://boston.menupages.com", foo$links, ">", foo$names, "</a></b>") %>%
paste(sep = "<br/>", ., foo$addresses)
paste0("<b><a href='http://boston.menupages.com", foo$links, ">", foo$names, "</a></b>") %>%
paste(sep = "<br/>", ., foo$addresses, foo$price)
foo$content <- paste0("<b><a href='http://boston.menupages.com", foo$links, ">", foo$names, "</a></b>") %>%
paste(sep = "<br/>", ., foo$addresses, foo$price)
foo
m <- leaflet(foo) %>%
setView(-71.057608, 42.356745, zoom = 16) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
str(foo)
foo$content <- paste0("<b><a href='http://boston.menupages.com", foo$links, ">", foo$names, "</a></b>")
m <- leaflet(foo) %>%
setView(-71.057608, 42.356745, zoom = 16) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
paste0("<b><a href='http://boston.menupages.com", foo$links, ">", foo$names, "</a></b>")
foo <- head(my_data)
foo
substr(foo, 1, nchar(foo) - 1)
substr(foo$links, 1, nchar(foo$links) - 1)
gsub("/$", "", foo$links)
foo$links <- gsub("/$", "", foo$links)
foo$content <- paste0("<b><a href='http://boston.menupages.com", foo$links, ">", foo$names, "</a></b>")
foo
m <- leaflet(foo) %>%
setView(-71.057608, 42.356745, zoom = 16) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
foo$content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
foo
m <- leaflet(foo) %>%
setView(-71.057608, 42.356745, zoom = 16) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
paste0("<b><a href='http://boston.menupages.com", foo$links, ">", foo$names, "</a></b>") %>%
paste(sep = "<br/>", ., foo$addresses, foo$price)
foo$content <- paste0("<b><a href='http://boston.menupages.com", foo$links, "'>", foo$names, "</a></b>") %>%
paste(sep = "<br/>", ., foo$addresses, foo$price)
m <- leaflet(foo) %>%
setView(-71.057608, 42.356745, zoom = 16) %>%
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
rm(list = ls())
library(leaflet)
my_data <- read.csv("Data/restaurant_ratings.csv")
names(my_data)[4:5] <- c("latitude", "longitude")
foo$links <- gsub("/$", "", foo$links)
my_data$links <- gsub("/$", "", foo$links)
my_data$links <- gsub("/$", "", my_data$links)
my_data$content <- paste0("<b><a href='http://boston.menupages.com", foo$links, "'>", my_data$names, "</a></b>") %>%
paste(sep = "<br/>", ., my_data$addresses, my_data$price)
my_data$content <- paste0("<b><a href='http://boston.menupages.com", my_data$links, "'>", my_data$names, "</a></b>") %>%
paste(sep = "<br/>", ., my_data$addresses, my_data$price)
m <- leaflet(my_data[0:200]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
# Then figure out how to make this reactive
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
paste0("<b><a href='http://boston.menupages.com", my_data$links, "'>", my_data$names, "</a></b>") %>%
paste("<center>", my_data$addresses, my_data$price, "</center>", sep = "<br/>")
paste0("<b><a href='http://boston.menupages.com", my_data$links, "'>", my_data$names, "</a></b>") %>%
paste("<center>", ., my_data$addresses, my_data$price, "</center>", sep = "<br/>")
my_data$content <- paste0("<b><a href='http://boston.menupages.com", my_data$links, "'>", my_data$names, "</a></b>") %>%
paste("<center>", ., my_data$addresses, my_data$price, "</center>", sep = "<br/>")
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content,
clusterOptions = markerClusterOptions())
m
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addMarkers(~longitude, ~latitude, popup = ~content)
m
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
output_table$content
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content)
m
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content, stroke = FALSE)
m
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content, stroke = FALSE, fillOpacity = 0.5)
m
head(my_data)
filter(my_data, names == "Au Bon Pain")
my_data
filter(my_data, addresses == "53 State Street")
pal <- colorFactor(c("navy", "red"), domain = c("ship", "pirate"))
pal
pal <- colorFactor(c("navy", "red"), domain = c("red", "green"))
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content, stroke = FALSE, fillOpacity = 0.5,
color = ~pal(type))
m
head(my_data)
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content, stroke = FALSE, fillOpacity = 0.5,
color = ~pal(health_color))
m
pal <- colorFactor(c("red", "yellow", "green"), domain = c("red", "yellow", "green"))
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content, stroke = FALSE, fillOpacity = 0.5,
color = ~pal(health_color))
m
head(my_data)
filter(my_data, names == "Au Bon Pain")
pal <- colorFactor(c("green", "yellow", "red"), domain = c("green", "yellow", "red"))
m <- leaflet(my_data[0:200, ]) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content, stroke = FALSE, fillOpacity = 0.5,
color = ~pal(health_color))
m
m
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
m <- leaflet(my_data) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content, stroke = FALSE, fillOpacity = 0.5,
color = ~pal(health_color))
m
?colorFactor
pal <- colorFactor(c("green", "yellow", "red"), levels = c("green", "yellow", "red"))
m <- leaflet(my_data) %>%
setView(-71.057608, 42.356745, zoom = 16) %>% # needs to be set by the person searching a given address
addProviderTiles("CartoDB.Positron") %>%
addCircleMarkers(~longitude, ~latitude, popup = ~content, stroke = FALSE, fillOpacity = 0.5,
color = ~pal(health_color))
m
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
shiny::runApp('~/Documents/Insight Health Data Science/Project/Shiny')
vignette("databases", package = "dplyr")
install.packages("RMySQL")
rm(list = ls())
library(RMySQL)
my_db <- dbColumnInfo(MySQL(), user = 'root', password = '', host = 'localhost')
my_db <- dbColumnInfo(MySQL(), user = 'dpmartin42', password = 'password', host = 'localhost')
rm(list = ls())
install.packages("DBI")
install.packages("DBI")
